'use strict'

const assert = require('assert')
const G = require('../../lib')

describe('reduce', function () {
  it('ignores "initialValue" if set to "undefined"', function () {
    assert.equal(
      G.reduce((previous, current) => previous + current, undefined)([1, 2, 3]),
      6
    )
  })

  // This is an automatically generated stub.
  it('Array', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Int8Array', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Uint8Array', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Uint8ClampedArray', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Int16Array', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Uint16Array', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Int32Array', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Uint32Array', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Float32Array', function () {
    assert('reduce' in G)
  })

  // This is an automatically generated stub.
  it('Float64Array', function () {
    assert('reduce' in G)
  })

  it('Map', function () {
    assert.equal(
      G.reduce(
        (previous, [key, value]) => previous + key + value,
        '',
        new Map([['a', 1], ['b', 2]])
      ),
      'a1b2'
    )
  })
})
